# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from multirobot_map_merge/mapPair2tfRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import nav_msgs.msg
import std_msgs.msg

class mapPair2tfRequest(genpy.Message):
  _md5sum = "8cca8e0556615a0ebc57fe8b159f5410"
  _type = "multirobot_map_merge/mapPair2tfRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """nav_msgs/OccupancyGrid grid1
nav_msgs/OccupancyGrid grid2

================================================================================
MSG: nav_msgs/OccupancyGrid
# This represents a 2-D grid map, in which each cell represents the probability of
# occupancy.

Header header 

#MetaData for the map
MapMetaData info

# The map data, in row-major order, starting with (0,0).  Occupancy
# probabilities are in the range [0,100].  Unknown is -1.
int8[] data

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: nav_msgs/MapMetaData
# This hold basic information about the characterists of the OccupancyGrid

# The time at which the map was loaded
time map_load_time
# The map resolution [m/cell]
float32 resolution
# Map width [cells]
uint32 width
# Map height [cells]
uint32 height
# The origin of the map [m, m, rad].  This is the real-world pose of the
# cell (0,0) in the map.
geometry_msgs/Pose origin
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['grid1','grid2']
  _slot_types = ['nav_msgs/OccupancyGrid','nav_msgs/OccupancyGrid']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       grid1,grid2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mapPair2tfRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.grid1 is None:
        self.grid1 = nav_msgs.msg.OccupancyGrid()
      if self.grid2 is None:
        self.grid2 = nav_msgs.msg.OccupancyGrid()
    else:
      self.grid1 = nav_msgs.msg.OccupancyGrid()
      self.grid2 = nav_msgs.msg.OccupancyGrid()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.grid1.header.seq, _x.grid1.header.stamp.secs, _x.grid1.header.stamp.nsecs))
      _x = self.grid1.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2If2I7d().pack(_x.grid1.info.map_load_time.secs, _x.grid1.info.map_load_time.nsecs, _x.grid1.info.resolution, _x.grid1.info.width, _x.grid1.info.height, _x.grid1.info.origin.position.x, _x.grid1.info.origin.position.y, _x.grid1.info.origin.position.z, _x.grid1.info.origin.orientation.x, _x.grid1.info.origin.orientation.y, _x.grid1.info.origin.orientation.z, _x.grid1.info.origin.orientation.w))
      length = len(self.grid1.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.grid1.data))
      _x = self
      buff.write(_get_struct_3I().pack(_x.grid2.header.seq, _x.grid2.header.stamp.secs, _x.grid2.header.stamp.nsecs))
      _x = self.grid2.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2If2I7d().pack(_x.grid2.info.map_load_time.secs, _x.grid2.info.map_load_time.nsecs, _x.grid2.info.resolution, _x.grid2.info.width, _x.grid2.info.height, _x.grid2.info.origin.position.x, _x.grid2.info.origin.position.y, _x.grid2.info.origin.position.z, _x.grid2.info.origin.orientation.x, _x.grid2.info.origin.orientation.y, _x.grid2.info.origin.orientation.z, _x.grid2.info.origin.orientation.w))
      length = len(self.grid2.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.grid2.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.grid1 is None:
        self.grid1 = nav_msgs.msg.OccupancyGrid()
      if self.grid2 is None:
        self.grid2 = nav_msgs.msg.OccupancyGrid()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.grid1.header.seq, _x.grid1.header.stamp.secs, _x.grid1.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.grid1.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.grid1.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.grid1.info.map_load_time.secs, _x.grid1.info.map_load_time.nsecs, _x.grid1.info.resolution, _x.grid1.info.width, _x.grid1.info.height, _x.grid1.info.origin.position.x, _x.grid1.info.origin.position.y, _x.grid1.info.origin.position.z, _x.grid1.info.origin.orientation.x, _x.grid1.info.origin.orientation.y, _x.grid1.info.origin.orientation.z, _x.grid1.info.origin.orientation.w,) = _get_struct_2If2I7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.grid1.data = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.grid2.header.seq, _x.grid2.header.stamp.secs, _x.grid2.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.grid2.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.grid2.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.grid2.info.map_load_time.secs, _x.grid2.info.map_load_time.nsecs, _x.grid2.info.resolution, _x.grid2.info.width, _x.grid2.info.height, _x.grid2.info.origin.position.x, _x.grid2.info.origin.position.y, _x.grid2.info.origin.position.z, _x.grid2.info.origin.orientation.x, _x.grid2.info.origin.orientation.y, _x.grid2.info.origin.orientation.z, _x.grid2.info.origin.orientation.w,) = _get_struct_2If2I7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.grid2.data = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.grid1.header.seq, _x.grid1.header.stamp.secs, _x.grid1.header.stamp.nsecs))
      _x = self.grid1.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2If2I7d().pack(_x.grid1.info.map_load_time.secs, _x.grid1.info.map_load_time.nsecs, _x.grid1.info.resolution, _x.grid1.info.width, _x.grid1.info.height, _x.grid1.info.origin.position.x, _x.grid1.info.origin.position.y, _x.grid1.info.origin.position.z, _x.grid1.info.origin.orientation.x, _x.grid1.info.origin.orientation.y, _x.grid1.info.origin.orientation.z, _x.grid1.info.origin.orientation.w))
      length = len(self.grid1.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.grid1.data.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.grid2.header.seq, _x.grid2.header.stamp.secs, _x.grid2.header.stamp.nsecs))
      _x = self.grid2.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2If2I7d().pack(_x.grid2.info.map_load_time.secs, _x.grid2.info.map_load_time.nsecs, _x.grid2.info.resolution, _x.grid2.info.width, _x.grid2.info.height, _x.grid2.info.origin.position.x, _x.grid2.info.origin.position.y, _x.grid2.info.origin.position.z, _x.grid2.info.origin.orientation.x, _x.grid2.info.origin.orientation.y, _x.grid2.info.origin.orientation.z, _x.grid2.info.origin.orientation.w))
      length = len(self.grid2.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.grid2.data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.grid1 is None:
        self.grid1 = nav_msgs.msg.OccupancyGrid()
      if self.grid2 is None:
        self.grid2 = nav_msgs.msg.OccupancyGrid()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.grid1.header.seq, _x.grid1.header.stamp.secs, _x.grid1.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.grid1.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.grid1.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.grid1.info.map_load_time.secs, _x.grid1.info.map_load_time.nsecs, _x.grid1.info.resolution, _x.grid1.info.width, _x.grid1.info.height, _x.grid1.info.origin.position.x, _x.grid1.info.origin.position.y, _x.grid1.info.origin.position.z, _x.grid1.info.origin.orientation.x, _x.grid1.info.origin.orientation.y, _x.grid1.info.origin.orientation.z, _x.grid1.info.origin.orientation.w,) = _get_struct_2If2I7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.grid1.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      _x = self
      start = end
      end += 12
      (_x.grid2.header.seq, _x.grid2.header.stamp.secs, _x.grid2.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.grid2.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.grid2.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.grid2.info.map_load_time.secs, _x.grid2.info.map_load_time.nsecs, _x.grid2.info.resolution, _x.grid2.info.width, _x.grid2.info.height, _x.grid2.info.origin.position.x, _x.grid2.info.origin.position.y, _x.grid2.info.origin.position.z, _x.grid2.info.origin.orientation.x, _x.grid2.info.origin.orientation.y, _x.grid2.info.origin.orientation.z, _x.grid2.info.origin.orientation.w,) = _get_struct_2If2I7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.grid2.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2If2I7d = None
def _get_struct_2If2I7d():
    global _struct_2If2I7d
    if _struct_2If2I7d is None:
        _struct_2If2I7d = struct.Struct("<2If2I7d")
    return _struct_2If2I7d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from multirobot_map_merge/mapPair2tfResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class mapPair2tfResponse(genpy.Message):
  _md5sum = "8e53e33c360a6165e28324dd13a4c9bc"
  _type = "multirobot_map_merge/mapPair2tfResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Transform transform
float64 confidence

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['transform','confidence']
  _slot_types = ['geometry_msgs/Transform','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       transform,confidence

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mapPair2tfResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      if self.confidence is None:
        self.confidence = 0.
    else:
      self.transform = geometry_msgs.msg.Transform()
      self.confidence = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.confidence,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.confidence,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
class mapPair2tf(object):
  _type          = 'multirobot_map_merge/mapPair2tf'
  _md5sum = '6fa85f9e352b2ce5cb5617042231d419'
  _request_class  = mapPair2tfRequest
  _response_class = mapPair2tfResponse
