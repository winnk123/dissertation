// Generated by gencpp from file multirobot_map_merge/mapPair2tfResponse.msg
// DO NOT EDIT!


#ifndef MULTIROBOT_MAP_MERGE_MESSAGE_MAPPAIR2TFRESPONSE_H
#define MULTIROBOT_MAP_MERGE_MESSAGE_MAPPAIR2TFRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>

namespace multirobot_map_merge
{
template <class ContainerAllocator>
struct mapPair2tfResponse_
{
  typedef mapPair2tfResponse_<ContainerAllocator> Type;

  mapPair2tfResponse_()
    : transform()
    , confidence(0.0)  {
    }
  mapPair2tfResponse_(const ContainerAllocator& _alloc)
    : transform(_alloc)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transform_type;
  _transform_type transform;

   typedef double _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator> const> ConstPtr;

}; // struct mapPair2tfResponse_

typedef ::multirobot_map_merge::mapPair2tfResponse_<std::allocator<void> > mapPair2tfResponse;

typedef boost::shared_ptr< ::multirobot_map_merge::mapPair2tfResponse > mapPair2tfResponsePtr;
typedef boost::shared_ptr< ::multirobot_map_merge::mapPair2tfResponse const> mapPair2tfResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator1> & lhs, const ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator2> & rhs)
{
  return lhs.transform == rhs.transform &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator1> & lhs, const ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multirobot_map_merge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e53e33c360a6165e28324dd13a4c9bc";
  }

  static const char* value(const ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e53e33c360a6165ULL;
  static const uint64_t static_value2 = 0xe28324dd13a4c9bcULL;
};

template<class ContainerAllocator>
struct DataType< ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multirobot_map_merge/mapPair2tfResponse";
  }

  static const char* value(const ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Transform transform\n"
"float64 confidence\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transform);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mapPair2tfResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multirobot_map_merge::mapPair2tfResponse_<ContainerAllocator>& v)
  {
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTIROBOT_MAP_MERGE_MESSAGE_MAPPAIR2TFRESPONSE_H
